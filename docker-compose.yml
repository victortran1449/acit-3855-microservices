services:
  dashboard:
    build:
      context: dashboard-ui
      dockerfile: Dockerfile
    ports:
    - "80:80"
    depends_on:
    - processing
    - analyzer

  receiver:
    deploy:
      replicas: 3
    build:
      context: receiver
      dockerfile: Dockerfile
    ports:
    - "8080"
    env_file: ".env"
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./config/receiver:/app/config

  storage:
    build:
      context: storage
      dockerfile: Dockerfile
    env_file: ".env"
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./config/storage:/app/config

  processing:
    build:
      context: processing
      dockerfile: Dockerfile
    ports:
    - "8100"
    environment:
      CORS_ALLOW_ALL: no # change to yes to allow all requests
    env_file: ".env"
    depends_on:
    - storage
    volumes:
      - ./logs:/app/logs
      - ./config/processing:/app/config
      - ./data/processing:/app/data

  analyzer:
    build:
      context: analyzer
      dockerfile: Dockerfile
    ports:
    - "8110"
    environment:
      CORS_ALLOW_ALL: no # change to yes to allow all requests
    env_file: ".env"
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./config/analyzer:/app/config

  consistency_check:
    build:
      context: consistency_check
      dockerfile: Dockerfile
    ports:
    - "8120"
    env_file: ".env"
    depends_on:
    - storage
    - analyzer
    - processing
    volumes:
      - ./logs:/app/logs
      - ./config/consistency_check:/app/config
      - ./data/consistency_check:/app/data

  zookeeper:
    image: wurstmeister/zookeeper
    volumes:
      - my-zookeeper:/opt/zookeeper-3.4.13/data

  kafka:
    image: wurstmeister/kafka
    command: [start-kafka.sh]
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1"
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG_DIRS: /kafka/logs
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - ./data/kafka:/kafka
    depends_on:
      - "zookeeper"
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      retries: 5
      start_period: 20s
      timeout: 5s

  db:
    image: mysql
    restart: always
    environment:
      MYSQL_RANDOM_ROOT_PASSWORD: 1
      MYSQL_DATABASE: livestream
    env_file: ".env" # Configure MYSQL_USER and MYSQL_PASSWORD based from storage conf
    volumes:
      - my-db:/var/lib/mysql
      - ./data/database:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      retries: 5
      start_period: 20s
      timeout: 5s

volumes:
  my-db:
  my-zookeeper: